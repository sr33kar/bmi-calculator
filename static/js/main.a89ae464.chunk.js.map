{"version":3,"sources":["components/FormInput.js","components/BmiCalculator.js","components/BMI.js","App.js","index.js"],"names":["FormInput","props","name","type","title","value","onChange","className","autoComplete","BmiCalculator","getBmiValue","useState","heightUnit","setHeightUnit","setWeightUnit","unit","setUnit","data","heightCount","inchesCount","weightCount","count","setCount","useEffect","metricBMI","imperialBMI","onChangeInput","e","target","height","weight","bmi","Math","round","inches","heightToInches","parseInt","onClick","preventDefault","BMI","bmiValue","setBmiValue","bmiCategory","bmiClass","split","toLowerCase","style","backgroundColor","bmiBackgroundColor","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a89ae464.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nconst FormInput = props => {\r\n    const {\r\n        name,\r\n        type,\r\n        title,\r\n        value,\r\n        onChange\r\n        } = props;\r\n    return (\r\n        <div className=\"input-groups\">\r\n            <span className=\"label\">{title}</span>\r\n            <div className=\"range-container\">\r\n                <input \r\n                type={type}\r\n                name={name}\r\n                className=\"range-input\"\r\n                value={value}\r\n                onChange={onChange}\r\n                autoComplete=\"false\"\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nFormInput.propTypes = {\r\n    title: PropTypes.string,\r\n    value: PropTypes.string,\r\n    onChange: PropTypes.func.isRequired,\r\n    type: PropTypes.oneOf(['text'])\r\n}\r\nexport default FormInput;\r\n","import React, {useState, useEffect} from 'react';\r\nimport FormInput from './FormInput';\r\nimport PropTypes from 'prop-types';\r\nconst BmiCalculator = (props) => {\r\n    \r\n    const {getBmiValue} = props;\r\n    const [heightUnit, setHeightUnit] = useState('cm');\r\n    \r\n    const [weightUnit, setWeightUnit] = useState('kg');\r\n    \r\n    const [unit, setUnit] = useState('Metric');\r\n\r\n    // const [count, setCount] = useState({\r\n    //     \r\n    // });\r\n    const [count, setCount] = useState({\r\n        data:{\r\n            heightCount : '0',\r\n            inchesCount : '0',\r\n            weightCount : '0'\r\n        }\r\n    });\r\n    const {data } = count;\r\n    const { heightCount, inchesCount, weightCount} = data;\r\n\r\n    useEffect(()=>{\r\n        metricBMI(heightCount, weightCount);\r\n        imperialBMI(heightCount, weightCount, inchesCount);\r\n\r\n        // eslint-disable-next-line\r\n    },[heightCount, weightCount, inchesCount]);\r\n\r\n    const onChangeInput = e =>{\r\n        const {name, value}= e.target;\r\n        const {data}= count;\r\n        setCount({\r\n            data:{\r\n                ...data,\r\n                [name]:value\r\n            }\r\n        });\r\n    }\r\n\r\n    const onSelectTag = e => {\r\n        setUnit(e.target.value);\r\n        if(e.target.value === 'Metric'){\r\n            setHeightUnit('cm');\r\n            setWeightUnit('kg');\r\n        }\r\n        else{\r\n            setHeightUnit('ft');\r\n            setWeightUnit('lbs');\r\n        }\r\n    }\r\n\r\n    const metricBMI = (height, weight) =>{\r\n        if(height>0 && weight>0){\r\n            height /= 100;\r\n            const bmi = weight/ (height*height);\r\n            getBmiValue(Math.round(bmi));\r\n        }\r\n    }\r\n\r\n    const imperialBMI = (height, weight, inches) =>{\r\n        if (height> 0 && weight>0 && inches>0){\r\n            const heightToInches = (height *12) + parseInt(inches);\r\n            const bmi = 703* (weight/(heightToInches * heightToInches));\r\n            getBmiValue(Math.round(bmi));\r\n        }\r\n    }\r\n\r\n    const resetData = e=> {\r\n        e.preventDefault();\r\n        getBmiValue(0);\r\n        setUnit('Metric');\r\n        setCount({\r\n            data:{\r\n                heightCount : '0',\r\n                inchesCount : '0',\r\n                weightCount : '0'\r\n            }\r\n        });\r\n        setHeightUnit('cm');\r\n        setWeightUnit('kg');\r\n    }\r\n\r\n    return (\r\n        <>\r\n         <div className=\"bmi-inputs\">\r\n            <div className=\"bmi-input-fields\">\r\n                <div>\r\n                    <span className=\"label-unit\">Unit</span>\r\n                    <div className=\"unit\">\r\n                        <select\r\n                            name=\"unit\"\r\n                            value={unit}\r\n                            className=\"form-control form-control-sm\"\r\n                            onChange={onSelectTag}\r\n                            >\r\n\r\n                            <option value=\"Metric\">Metric</option>\r\n                            <option value=\"Imperial\">Imperial</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n                <FormInput \r\n                    type=\"text\"\r\n                    name=\"heightCount\"\r\n                    title={`height (${heightUnit})`}\r\n                    value={heightCount}\r\n                    onChange={onChangeInput}\r\n                />\r\n                {\r\n                    unit === 'Imperial' ?\r\n                <FormInput \r\n                    type=\"text\"\r\n                    name=\"inchesCount\"\r\n                    title=\"(in)\"\r\n                    value={inchesCount}\r\n                    onChange={onChangeInput}\r\n                /> : ''\r\n                }\r\n                <FormInput \r\n                    type=\"text\"\r\n                    name=\"weightCount\"\r\n                    title=\"weight (kg)\"\r\n                    value={weightCount}\r\n                    onChange={onChangeInput}\r\n                />\r\n            </div>     \r\n\r\n            <button className=\"button\" type=\"submit\" onClick={resetData}>Reset</button>\r\n        </div>   \r\n        </>\r\n    )\r\n}\r\nBmiCalculator.propTypes ={\r\n    getBmiValue: PropTypes.func.isRequired\r\n}\r\nexport default BmiCalculator;\r\n","import React, { Fragment, useState } from 'react'\r\nimport BmiCalculator from './BmiCalculator'\r\n\r\nconst BMI = () => {\r\n    const [bmiValue, setBmiValue] = useState(0);\r\n    const getBmiClass = (bmi) =>{\r\n        if(bmi>=1 && bmi<=18.5) return 'Underweight';\r\n        if(bmi>=18.5 && bmi<=24.9) return 'Normal Weight';\r\n        if(bmi>=24.9 && bmi<=29.9) return 'Overweight';\r\n        if(bmi>=30) return 'Obese';\r\n    }\r\n    const bmiBackgroundColor = bmi =>{\r\n        if(bmi>=1 && bmi<=18.5) return '#FED88B';\r\n        if(bmi>=18.5 && bmi<=24.9) return '#80ff80';\r\n        if(bmi>=24.9 && bmi<=29.9) return '#FF7F50';\r\n        if(bmi>=30) return '#FF5411';\r\n    }\r\n    const bmiCategory = getBmiClass(bmiValue);\r\n    let bmiClass ='';\r\n    if(bmiValue> 0 && bmiCategory){\r\n        bmiClass = bmiCategory.split(' ')[0].toLowerCase();\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"calculator\"\r\n                style={{ backgroundColor : bmiBackgroundColor(bmiValue)}}\r\n            >\r\n                <h3>Body Mass Index Calculator</h3>\r\n                <div className=\"bmi-result-container\">\r\n                    <div className=\"bmi-result\">\r\n                        <div className=\"bmi-result-number\">\r\n                            Body Mass Index (BMI) = {bmiValue}\r\n                        </div>\r\n                        <div className={`bmi-category ${bmiClass}`}>\r\n                            {bmiCategory}\r\n                        </div>\r\n                    </div>\r\n                    <BmiCalculator getBmiValue={setBmiValue} />\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default BMI;\r\n","import './App.css';\nimport BMI from './components/BMI';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"row justify-content-center\">\n        <div className=\"col-lg-6 col-lg-offset-3\">\n          <BMI />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}